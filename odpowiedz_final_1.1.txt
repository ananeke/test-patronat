////////////////////////////////////////////////////Wersja poprawiona///////////////////////////////////////////////////////////////////////////////////////////////////

ad.4 Gdy pojawia się bug to zakładam mu tickiet w bugtrackerze, opisuje w nim krok po kroku jak wywołać dany błąd oraz przypisuję dany bug do dewelopera odpowiedzialnego za moduł,
w którym błąd wystąpił. Po pewnym czasie dostaję nową wersję oprogramowania od dewelopera, który twierdzi, że błąd został naprawiony. Oznacza on to również odpowiednio w bugtruckerze.
W celu zweryfikowania czy błąd został naprawiony przechodzę ponownie kroki (retesty), które uprzednio ten błąd wywoływały. Gdy po wykonaniu tych kroków aplikacja zaochaowa się prawidłowo 
(tj. tak jak mówi specyfikacja) oznaczam w bugtruckerz, że nowa wersja oporgramowania została przetestowana i błąd już niewystępuje. Zamykam bugtruckera. 
Błąd od tej pory zostaje uznany jako naprawiony.

ad.6 Rozważmy dany kod:
	Pokrycie instrukcji:
		Pierwszy przypadek testowy (przykładowe dane testowe)
		
			a=1 i b=3
		
		W tym przypadku przechodzimy przez każdą decyzję pozytywnie, każda instrukcja się wykonuje. Osiągnięto 100% pokrycia instrukcji 
		i potrzebny do tego był tylko 1 przypadek testowy.

	Pokrycie decyzji:
		Przy pokryciu decyzji możemy wykorzystać przypadek testowy z pokrycia instrukcji co daje 50% pokrycia decyzyjnego. Brakujące 50% pokrycia
		decyzyjnego można uzyskać drugim przypadkiem testowym.
		
		Drugi przypadek testowy (przykładowe dane testowe)
			a=-1 i b=4

		W tym przypadku przechodzimy przez każdą decyzję negatywnie (żadna instrukcja się nie wykonuje).

	W tym momencie mamy 100% pokrycie decyzyjne. Wg. definicji: "Pełne pokrycie decyzji jest osiagalne wtedy, 
	gdy każde odgałęzienie procedury sterowania jest wykorzystane podczas testów choć raz."
	Można przetestować kod jeszcze dwoma przypadkami testowymi - tzw. "na krzyż"(tj, w przypadku trzecim - gdy przez pierwszą decyzję przechodzimy pozytywnie,
	a przez drugą netatywnie oraz przypadek czwarty odwrotnie do przypadku trzeciego - pierwsza decyzja negatywnie, a druga pozytywnie); ale to wykracza poza 
	pokrycie decyzyjne.

ad. 13 Sprawdziałbym dodatkowo co się stanie gdy:
	- czy jest różnica przy wywołaniu funcji 'cp' przez użytkowanika (user), a root'a
	- wywołałabym kilkadziesiąt razy podrząd jako użytkownik i root
	- użyłabym polecenia gdb i podczepić się pod proces by mieć więcej informacji o instrukcjach
	- użyłabym polecenia strace podejrzę dzieki temu wywołania funcji systemowych przez procesy, czas poszcególnych wywołąń oraz ich ilość
	- użyłabym polecenia ltrace - zobaczę do jakich bibliotek odwołuje się polecenie w czasie wywoływania


////////////////////////////////////////////////////////Wersja starsza ///////////////////////////////////////////////////////////////////////////////////////////////


1. Czym się różnią testy funkcjonalne od niefunkcjonalnych?
	Testy funkcjonalne obejmują testowanie oprogramowania - co robi;
	testy niefunkcjonalne obejmują testowanie oprogramowania - jak działa.
2. Co to są 'smoke testy' i testy regresji? Kiedy je stosujemy?
	Smoke testy są to testy polagające na sprawdzeniu czy podstawowe funkcje oprogramowania działają, wykonuje się je
	we wczesnych etapach projektu. 
	Testy regresji są to powtórnie wykonywane te same testy, na już przetestowanym oprogramowaniu, wykonuje się je gdy udostępniona jest nowa wersja do testowania.
3. Co jest celem testowania?
	Celem testowania jest znajdowanie różnego typu błędów; weryfikację oprogramowania czy spełnia wymogi specyfikacji oraz czy oprogramowanie spełnia oczekiwania użytkowanika(czyli walidacja).
4. Jak tester może sie upewnić, że błąd został naprwaiony?
	Gdy testy regresywne oprogramowania zakończą się pozytywnie. 
5. Testujesz aplikacje termometr, która wykonuje pomiar temperatury. Co byś zrobił, aby przetestować zachowanie aplikacji przy skrajnych wartościach -50C i 200C?
	Napisałabym test, w którym zmienną przechowująca wartość temperatury, zastymulowałabym podanymi skrajnymi inputami i obserwowała stan aplikacji. 
6. Ile przypaków testowych potrzeba, aby pokryć wszystkie możliwości?
	Przy napisaniu dwóch przypaków testowych uzyskamy pełne pokrycie kodu.
7. Dany jest input "wiek", który przyjmuje wartości od 18 do 60... Podaj wszystkie liczby, które wpisujesz.
	Dwie poprawne wartości brzegowe: 18 i 60; oraz dwie niepoprawne wartości brzegowe 17 i 61.
8. Jakie pytania zadasz analitykowi zanim przystąpisz do testów?
	Zadałabym następujące pytania: 
	-	Jakiego typu aplikację testujemy (bankowa, społecznościowa, zakupowa etc.)?
	-	W jakim systemie wykonana jest baza danych (np. relacyjna) i jakie dane przechwuje baza?
	- 	W jaki sposób następuje weryfikacja i logowanie?
	-	Jakiego typu są inputy? I jakiego typu inputów oczekuje baza danych?
	- 	Na kiedy  jest deadline? ;)
9. Czym różni się metoda GET od POST?
	Metoda GET przekazuje parametry poprzez adres URL, a metoda POST przez tablicę asocjacyjną.
10. Czy HTTP jest protokołem zmiennostanowym?
	HTTP nie jest protokołem zmiennostanowym. HTTP jest protokołem bezstanowym - nie przechowuje informacji co się działo wcześniej (nie przechowuje danych np. logowania, przeglodanych stron)
11. Czym rózni się LEFT JOIN od INNER JOIN?
	LEFT JOIN pobiera wszystkie rekordy z lewej tabeli i pasujące do klucza z prawej tabeli. INNER JOIN pobiera rekordy tylko pasujące do klucza z obu tabel.
12. W jakim katalogu, standardowo Linux trzyma pliki konfiguracyjne?
	Standardowo Linux  przechowuje pliki konfiguracyjne w  foldere '/etc/'
13. Jak przetestowałbyś bashową komendę cp?
	Na początek wpisałabym w terminalu polecenie 'man cp' w celu sprawdzenia do czego dana komenda służy, następnie sprawdziłabym czy nie jest na nią nałożony alias np. alias cp='ls -a'.
	